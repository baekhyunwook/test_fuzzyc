# Bazel workspace file for Fuzzyc parser.

workspace(name="fuzzyc")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "rules_python",
    sha256 = "8c15896f6686beb5c631a4459a3aa8392daccaab805ea899c9d14215074b60ef",
    strip_prefix = "rules_python-0.17.3",
    url = "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.17.3.tar.gz",
)

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

load("@rules_python//python:pip.bzl", "pip_parse")

# Install antlr4-tools to generate C++ Lexor and Parser.
pip_parse(
    name = "fuzzyc_deps",
    requirements_lock = "//:requirements_lock.txt",
)

load("@fuzzyc_deps//:requirements.bzl", "install_deps")
install_deps()

# Antlr4 CC Runtime Library.
http_archive(
    name = "antlr4_runtimes",
    build_file_content = """
package(default_visibility = ["//visibility:public"])
cc_library(
    name = "cpp",
    srcs = glob(["runtime/Cpp/runtime/src/**/*.cpp"]),
    hdrs = glob(["runtime/Cpp/runtime/src/**/*.h"]),
    includes = ["runtime/Cpp/runtime/src"],
)
    """,
    sha256 = "50e87636a61daabd424d884c60f804387430920072f585a9fee2b90e2043fdcc",
    strip_prefix = "antlr4-4.11.1",
    urls = ["https://github.com/antlr/antlr4/archive/v4.11.1.tar.gz"],
)

# Google absl
http_archive(
    name = "com_google_absl",
    urls = ["https://github.com/abseil/abseil-cpp/archive/refs/tags/20230125.0.tar.gz"],
    strip_prefix = "abseil-cpp-20230125.0",
    sha256 = "3ea49a7d97421b88a8c48a0de16c16048e17725c7ec0f1d3ea2683a2a75adc21",
)

# GoogleTest
http_archive(
    name = "com_google_googletest",
    urls = ["https://github.com/google/googletest/archive/refs/tags/v1.13.0.tar.gz"],
    strip_prefix = "googletest-1.13.0",
    sha256 = "ad7fdba11ea011c1d925b3289cf4af2c66a352e18d4c7264392fead75e919363",
)


